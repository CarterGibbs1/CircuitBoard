****************
* Project 3 - Circuit Tracer
* CS221 Section 4
* 12/11/21
* Carter Gibbs
**************** 

OVERVIEW:

 The program looks parses through a text file that represents a circuit board
 It then proceeds to find the optimal pathing through the circuit board from a starting position.
 to an ending position.


INCLUDED FILES:

 CircuitBoard.java - Parses through a .txt file and fills a 2D array with the characters in the .txt file.
 CircuitTracer.java - Search for shortest paths between start and end points on a circuit board.
 InvalidFileFormatException.java - CircuitBoard.java will throw this exception when the file being read in
				   doesn't match with valid files.
 OccupiedPositionException.java - If CircuitTracer.java tries to access a position on the circuit board that is
 			     already occupied, this exception will be thrown.
 Storage.java - A container for storing elements of type T in one of several possible underlying data structures.
 TraceState - Represents a search state including a potential path through a CircuitBoard
 

COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
 $ javac CircuitTracer.java

 Run the compiled class file with the command:
 $ java CircuitTracer (first argument) (second argument) (fileName)

 The first argument has two options: "-s" or "-q".
 "-s" runs as a stack data type and "-q" runs as a queue data type.
 The second argument has two options: "-c" or "-g".
 "-c" prints the output to the console and "-g" prints the output to a GUI.
 "-g" is currently not implemented.
 The last argument is the file name of the file you are trying to read in.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

 CircuitBoard.java creates a 2D array of characters, then it parses through a file
 containing the allowed characters and fills the 2D array with such characters. If there is
 a invalid character, too many rows or columns, bad input, then the program will throw an
 InvalidFileFormatException. The TraceState class keeps track of the current pathing state of the
 circuit board and adds another point in the path when called. It determines if points on the circuit board
 are open. If it tries to trace over an occupied position, an OccupiedPositionException is thrown.
 The CircuitTracer class searches for the shortest path between the starting and ending positions. It keeps
 an ArrayList of the best paths and clears the list if there is ever a shorter path. This class also parses
 through the command arguments that it is given. The Storage class creates either a queue or stack depending on
 whichever the user wants to run the program with.
 
 For future improvements, a recurssive function could be used instead to limit the amount of classes there are.

TESTING:

 The program is tested through many valid and invalid file formats. The exceptions are thrown correctly as well as
 the valid files produce the proper solution. There were around 10 valid files and 12 invalid files.

DISCUSSION:
 
 I had issues with the pseudo code of this problem. I couldn't figure out how to use a for each loop to check
 every open adjacent position, so I just used a bunch of if statements. I also swapped the inputs for a Point,
 so I was creating a Point object as Point(column, row) instead of Point(row, column) since I didn't realize the provided
 classes switched them for me. It took me a bit to fix but I got it eventually.
 The most challenging part of this project was starting it. I couldn't wrap my head around what I was supposed to do.
 It took me awhile to figure out how to find the startingPoint and endingPoint since the getBoard() method was private in
 CircuitBoard.java.
 
ANALYSIS:

 The stack implementation was LIFO, so it would solve one solution, then move onto the next, then the next.
 Rather than the queue implementation which is FIFO, so the program would do one point of the trace, then move onto a different solution
 and do one point of that solution, then keep going till all solutions were done.
 
 The total number of search states is not affected, just the order in which the search is run is affected.
 The program will still produce the same results either way.

 The Big-Oh runtime for the search algorithm is O(n * log(n)).

 Since the stack implementation does one solution, then move onto the next, then the next, and so on, the memory usage is lower than
 the queue implementation which does one part of the solution, then does one part of the next. So the stack will use less memory.
 
 The queue though can take less time with improvements. The first solution the queue finds will always be one of the fastest, so the
 queue can then do the rest of the states to make sure no other search is just as good, and then it can stop since it found the fastest.
 The stack has to run through all solutions instead. Its not always faster, just with large numbers of rows and columns, it typically will be.
